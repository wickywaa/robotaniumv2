events{}
http {
  # Timeouts
  # The client_body_timeout and client_header_timeout directives are
  # responsible for the time a server will wait for a client body or
  # client header to be sent after request. If neither a body or header
  # is sent, the server will issue a 408 error or Request time out.
  #
  # The keepalive_timeout assigns the timeout for keep-alive connections
  # with the client. Simply put, Nginx will close connections with the
  # client after this period of time.
  #
  # Finally, the send_timeout is a timeout for transmitting a response
  # to the client. If the client does not receive anything within this
  # time, then the connection will be closed. Send the client a "request
  # timed out" if the body is not loaded by this time. Default 60.
  client_body_timeout   32;
  client_header_timeout 32;
  # Every 60 seconds server broadcasts Sync packets, so 90 is a conservative upper bound. Default is 65
  keepalive_timeout 90;
  send_timeout 300;

  include /etc/nginx/mime.types;

  server {
    listen 80;
    server_name localhost;
    client_max_body_size 2M;

    index index.html;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    #mde needed to avoid nginx crash on startup
    # if the containers are not yet available
    # using the docker resolver and variables
    # forces nginx to reevaluate the dns names
    resolver 127.0.0.11 ipv6=off valid=1s;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host $host;


    location /admin/ {
        proxy_pass  http://adminFrontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-for $remote_addr;
       #proxy_set_header X-Forwarded-Proto $scheme;
    }

    location / {
      proxy_pass  http://robotaniumFrontend;
    }
location ~ /api/v2/ {
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_read_timeout 86400;
    proxy_pass http://backendv2:8080;
}
    #webSocket specific route if needed
    location /ws/ {
      proxy_pass http://backendv2:8080/ws/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_read_timeout 86400; # 24 hours for WebSocket connections
    }

    # @TODO implement the same feature in one location block with regex matching if possible
    
    location /nginx_status {
      # Enable Nginx stats
      stub_status on;
      # Only allow access from your IP e.g 1.1.1.1 or localhost #
      allow 127.0.0.1;
      allow 1.1.1.1;
      # Other request should be denied
      deny all;
      access_log off;
    }
  }
}
